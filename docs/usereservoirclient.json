{
    "doc": {
        "metadata": {
            "image": [],
            "title": "",
            "description": ""
        },
        "api": {
            "method": "get",
            "url": "",
            "auth": "required",
            "results": {
                "codes": [
                    {
                        "name": "",
                        "code": "{}",
                        "language": "json",
                        "status": 200
                    },
                    {
                        "name": "",
                        "code": "{}",
                        "language": "json",
                        "status": 400
                    }
                ]
            },
            "params": []
        },
        "next": {
            "description": "",
            "pages": []
        },
        "algolia": {
            "recordCount": 1,
            "publishPending": false,
            "updatedAt": "2023-02-20T21:26:06.637Z"
        },
        "title": "useReservoirClient",
        "icon": "",
        "updates": [],
        "type": "basic",
        "slug": "usereservoirclient",
        "excerpt": "",
        "body": "This hook exposes the underlying ReservoirKit client which is in charge of making the underlying execute requests and interacting with web3 interfaces. The hook can also be useful to get the underlying global configuration of ReservoirKit (apiBase, apiKey etc).\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"import { useReservoirClient } from '@reservoir0x/reservoir-kit-ui'\\n\\nconst client = useReservoirClient()\\nconsole.log(client?.apiBase)\",\n      \"language\": \"typescript\"\n    }\n  ]\n}\n[/block]\nIt can also be useful to trigger actions in a flexible way. Actions are the underlying execute apis that ReservoirKit's ui triggers. Here's an example of how to trigger the underlying execute/buy api.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"import { useReservoirClient } from '@reservoir0x/reservoir-kit-ui'\\n\\nconst client = useReservoirClient()\\nawait reservoirClient.actions\\n      .buyToken({\\n        ...\\n      })\\n      .then(()=> {})\\n      .catch(() => {})\",\n      \"language\": \"typescript\"\n    }\n  ]\n}\n[/block]",
        "order": 7,
        "isReference": false,
        "deprecated": false,
        "hidden": false,
        "sync_unique": "",
        "link_url": "",
        "link_external": false,
        "previousSlug": "",
        "slugUpdatedAt": "2022-08-09T10:39:24.490Z",
        "revision": 1,
        "_id": "63f3e45464c04e0012a8fbc5",
        "pendingAlgoliaPublish": false,
        "createdAt": "2022-08-09T12:27:24.467Z",
        "updatedAt": "2022-08-09T12:36:42.326Z",
        "user": "62a237cf8ebf2e01e174e64a",
        "parentDoc": "63f3e45464c04e0012a8fbc0",
        "category": "63f3e45464c04e0012a8fb21",
        "project": "62a239ec3e4c0800663c6d05",
        "version": "63f3e45464c04e0012a8fc52",
        "__v": 0,
        "isApi": false,
        "id": "63f3e45464c04e0012a8fbc5"
    },
    "meta": {
        "slug": "usereservoirclient",
        "type": "docs",
        "parent": "63f3e45464c04e0012a8fbc0",
        "image": [],
        "title": "useReservoirClient",
        "title_raw": "useReservoirClient",
        "description": "This hook exposes the underlying ReservoirKit client which is in charge of making the underlying execute requests and interacting with web3 interfaces. The hook can also be useful to get the underlying global configuration of ReservoirKit (apiBase, apiKey etc).TypeScriptimport { useReservoirClient }...",
        "_id": "63f3e45464c04e0012a8fbc5",
        "hidden": false
    },
    "activeDoc": "usereservoirclient"
}